<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lsp on Terminal, command line, code</title>
    <link>https://getman.io/tags/lsp/</link>
    <description>Recent content in lsp on Terminal, command line, code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Apr 2021 14:43:13 +0100</lastBuildDate><atom:link href="https://getman.io/tags/lsp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Programming Go in Neovim</title>
      <link>https://getman.io/posts/programming-go-in-neovim/</link>
      <pubDate>Wed, 14 Apr 2021 14:43:13 +0100</pubDate>
      
      <guid>https://getman.io/posts/programming-go-in-neovim/</guid>
      <description>There are tons of articles on how to programming Go in vim, how to turn vim into IDE. The purpose of this article is to look closer at nvim as an LSP client, especially for Go.
Intro Nvim introduced nvim-lspconfig, a collection of common configurations for Neovimâ€™s built-in language server client . From that point nvim can be lsp client for any server that supports LSP specification.
My primary setup before was vim with vim-go.</description>
    </item>
    
    <item>
      <title>Gopls</title>
      <link>https://getman.io/posts/gopls/</link>
      <pubDate>Sat, 13 Mar 2021 20:24:51 +0000</pubDate>
      
      <guid>https://getman.io/posts/gopls/</guid>
      <description>Gopls Intro Mid of 2018, I decided to switch from Java to Go. Language change leads to change editor and whole ecosystem and workflow such as doing my job primarily from the terminal.
At the very beginning of my Go journey, I tried Vim as an editor(with vim-go), but I gave up because of a double burden such as learning a new language and a new editor at the same time.</description>
    </item>
    
  </channel>
</rss>
